(()=>{"use strict";var __webpack_modules__={491:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Component=void 0,t.Component=function(e,t){return function(o,n,r){o.prototype.obj=e,o.prototype.mainPath=t}}},912:(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.Core=void 0;class Core{constructor(){this.htmlSource="",this.obj={selector:"",templateUrl:"",styleUrl:""}}buildComponent(e){var t=Object.getPrototypeOf(e);this.obj=t.obj;var o="",n="src/"+t.mainPath+"/"+t.obj.templateUrl.replace("./","");return this.getHTMLSource(n).then((n=>{this.findUndefined(n,Object.keys(e));let r=(o=n).match(/\{{(.*?)\}}/g);var c=Object.keys(e).concat(Object.getOwnPropertyNames(t));if(r)for(let t=0;t<r.length;t++)o=this.replaceFunctionInHTML(o,c,e,r[t]);return this.htmlSource=o,this.htmlSource}))}replaceFunctionInHTML(htmlSource,funcNames,targetPrototype,htmlVariable){let funcValue="";const temp=htmlVariable.match(/(?<=\{{).+?(?=\}})/g);var ff=temp;temp&&(ff=htmlVariable.match(/(?<=\{{).+?(?=\}})/g)[0]);for(let e=0;e<funcNames.length;e++)ff=ff.replace(funcNames[e],"targetPrototype."+funcNames[e]);return funcValue=eval(ff),htmlSource.replace(htmlVariable,funcValue)}replaceTSVariableInHTML(e,t,o){var n="{{\\s*"+t+"\\s*}}";return e.replace(new RegExp(n,"g"),o)}findUndefined(e,t){var o=[];let n=e.match(/\{{(.*?)\}}/g);n||(n=[]);for(let e=0;e<t.length;e++)-1===n.findIndex((o=>o===t[e]))&&n[e]&&o.push(n[e])}getHTMLSource(e){return fetch(e).then((e=>e.text().then((e=>e))))}}exports.Core=Core},502:function(e,t,o){var n=this&&this.__decorate||function(e,t,o,n){var r,c=arguments.length,a=c<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,o,n);else for(var l=e.length-1;l>=0;l--)(r=e[l])&&(a=(c<3?r(a):c>3?r(t,o,a):r(t,o))||a);return c>3&&a&&Object.defineProperty(t,o,a),a},r=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0}),t.LoginComponent=void 0;const c=o(491);let a=class{constructor(){this.havij="Man havij hastm!"}};a=n([(0,c.Component)({selector:"app-login",templateUrl:"./login.component.html",styleUrl:"./login.component.scss"},"login"),r("design:paramtypes",[])],a),t.LoginComponent=a},294:function(e,t,o){var n=this&&this.__decorate||function(e,t,o,n){var r,c=arguments.length,a=c<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,o,n);else for(var l=e.length-1;l>=0;l--)(r=e[l])&&(a=(c<3?r(a):c>3?r(t,o,a):r(t,o))||a);return c>3&&a&&Object.defineProperty(t,o,a),a},r=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0}),t.ProfileComponent=void 0;const c=o(491);let a=class{constructor(){this.profileMsg="Man Profile hastam!"}};a=n([(0,c.Component)({selector:"app-profile",templateUrl:"./profile.component.html",styleUrl:"./profile.component.scss"},"profile"),r("design:paramtypes",[])],a),t.ProfileComponent=a},929:function(e,t,o){var n=this&&this.__decorate||function(e,t,o,n){var r,c=arguments.length,a=c<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,o,n);else for(var l=e.length-1;l>=0;l--)(r=e[l])&&(a=(c<3?r(a):c>3?r(t,o,a):r(t,o))||a);return c>3&&a&&Object.defineProperty(t,o,a),a},r=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0}),t.RegisterComponent=void 0;const c=o(491);let a=class{constructor(e){this.name=e,this.havij="Man register havij hastm!",this.sib="aaa di di",this.hg=0,this.kio=200,this.hg=10*Math.random()}find(){return 10*Math.random()}search(e){return console.log(e),e}gett(e,t){return e*t}fff(e,t){return e*t}};a=n([(0,c.Component)({selector:"app-register",templateUrl:"./register.component.html",styleUrl:"./register.component.scss"},"register"),r("design:paramtypes",[String])],a),t.RegisterComponent=a}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var o=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(o.exports,o,o.exports,__webpack_require__),o.exports}var __webpack_exports__={};(()=>{const e=__webpack_require__(502),t=__webpack_require__(929),o=__webpack_require__(912),n=__webpack_require__(294);customElements.define("element-details",class extends HTMLElement{constructor(){super()}connectedCallback(){this.className="ddddd"}disconnectedCallback(){}static get observedAttributes(){return[]}attributeChangedCallback(e,t,o){}adoptedCallback(){}});var r=document.createElement("link");r.setAttribute("href","https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css"),r.setAttribute("rel","stylesheet"),document.head.appendChild(r);var c=document.createElement("element-details");document.createElement("p"),document.body.appendChild(c),new class{constructor(){this.title="aaaa"}};var a=e.LoginComponent,l=[e.LoginComponent,t.RegisterComponent,n.ProfileComponent];console.log(l[0].prototype);var s=new a,i=new o.Core;function p(){for(let e=0;e<l.length;e++){const t=document.getElementsByTagName(l[e].prototype.obj.selector);if(t.length>0)for(let o=0;o<t.length;o++)if(!t[o].firstChild){const n=new l[e];i.buildComponent(n).then((e=>{t[o].innerHTML=e,p()}))}}}i.buildComponent(s).then((e=>{console.log(e),console.log(s.obj);var t=document.createElement(s.obj.selector);t.innerHTML=e,document.body.appendChild(t),p()})),console.log(i.htmlSource)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,